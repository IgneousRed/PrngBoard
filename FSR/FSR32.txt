FSR32_init :: proc(seed: u32) -> FSR32 {
	rng := FSR32{seed, seed, seed, seed, seed}
	for _ in 0 ..< 15 do FSR32_u32(&rng)
	return rng
}
FSR32_u32 :: proc(r: ^FSR32) -> u32 {
	s := r[0] - r[1]
	r[0] = r[1] + r[4]
	r[1] = bits.byte_swap(r[2])
	r[2] = r[3] + s
	r[3] = bits.rotate_left32(s, 21)
	r[4] += lib.ODD_PHI_32
	return r[0]
}
FSR32 :: [5]u32

----------------------------------------------------------------

RNG_test using PractRand version 0.95
RNG = RNG_stdin, seed = 0x0000000000000000
test set = expanded, folding = extra

length= 64 kilobytes (2^16 bytes)
  [Low1/64]FPF-14+6/64:all          R= +20.0  p~=   7e-6    mildly suspicious

length= 16 megabytes (2^24 bytes)
  [Low4/32]BCFN(0+3,13-6,T)         R= +14.0  p =  3.0e-5   unusual

length= 32 terabytes (2^45 bytes)
  no anomalies in 2792 test result(s)
